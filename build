#!/usr/bin/env bash

main() {
    _get_commandline_opts $@
    _init_sudo
    _load_yaml_config
    image_name_tagged="${IMAGENAME}${image_tag}"  # add tag from -t
    _remove_previous_image  # i.e. image:lastest or custom tag specified with -t
    _remove_all_buildnumber_tags # filters all tags with the Bn.m pattern
    _exec_build_command
    if [[ "$manifest" ]]; then
        if [[ "$MANIFEST_SCOPE" ]]; then
            _generate_manifest_and_image_build_number
            _tag_with_build_number
        else
            echo "MANIFEST_SCOPE not set - no build number generated."
        fi
    fi
    _push_image
    [[ "$verbose" ]] && echo 'done.'
}


_get_commandline_opts() {
    manifest='True'
    unset image_tag
    push_latest='True'
    while getopts ":cdhf:klmMprt:" opt; do
      case $opt in
        c) CACHEOPT="--no-cache";;
        f) if [[ -f "$OPTARG" ]]; then
               dc_config="${dc_config} -f ${OPTARG}"
           else
               echo -f $OPTARG must be a file; exit 1
           fi;;
        k) keep_opt='True';;
        l) unset push_latest;;
        m) manifest='True';;
        M) unset manifest;;
        p) push='True';;
        r) remove_img='True';;
        t) image_tag=":${OPTARG}";;
        v) verbose='True';;
        :) echo "Option -$OPTARG requires an argument"; exit 1;;
        *) echo "usage: $0 [-b] [-c] [-f file...] [-h] [-k] [-l] [-m] [-M] [-p] [-r] [-t tag] [cmd]
             -c  do not use cache (build --no-cache)
             -f  compose file
             -k  keep previous build tags (default: remove all 'B*' tags)
             -l  do not push image:latest (only :<buildno> or tag from -t)
             -m  generate manifest for build number generation (default)
             -M  do not generate manifest for build number generation
             -p  push after build (pushing :latest depends on -l)
             -r  remove existing image (all tags: docker rmi -f imageid)
             -t  add this custom tag to the build target name
             -v  verbose

           The build-number and -t custom tagging require that there is not tag on the image element in the compose file.

           To explicitly specify a registry set DOCKER_REGISTRY_PREFIX, which must include a trailing slash.

           To generate build numbers $MANIFEST_SCOPE must be set to 'local' or 'global'
           "; exit 0;;
      esac
    done
    shift $((OPTIND-1))

}


_load_yaml_config() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    PROJ_HOME=$(cd $(dirname $SCRIPTDIR) && pwd)
    config_script=$(echo ${dc_config} | sed -E 's/\.ya?ml$/.sh/')
    $SCRIPTDIR/config2sh.py -k 'container_name' -k 'image' -k 'build.dockerfile' $dc_config $PROJ_HOME/$config_script
    source $PROJ_HOME/$config_script
}


_init_sudo() {
    if (( $(id -u) != 0 )); then
        sudo='sudo -n'
    fi
}


_remove_previous_image() {
    if [[ "$remove_img" ]]; then
        image_id=$(${sudo} docker images ls --filter "reference=${image_name_tagged}" -q)
        cmd="${sudo} docker rmi -f ${image_id}"
        [[ "$verbose" ]] && echo $cmd
        $cmd 2> /dev/null || true
    fi
}


_remove_all_buildnumber_tags() {
    tmpfile=$(mktemp /tmp/build_shXXXX.tmp)
    $sudo docker image ls --filter reference=${IMAGENAME} --format "{{.Tag}} {{.Repository}}" |\
        perl -ne 'if (/^(B\d+\.\d+)\s+(.+)$/) {print "\$sudo docker rmi $2:$1\n"}' > $tmpfile
    [[ "$verbose" ]] && cat $tmpfile
    bash $tmpfile
    rm $tmpfile
}


_exec_build_command() {
    cmd="${sudo} docker_compose ${dc_config} build"
    [[ "$verbose" ]] && $cmd
    $cmd
    rc=$?
    if (( $rc == 0 )); then
        echo "image: ${image_name_tagged} built."
    else
        echo -e '\E[33;31m'"\033[1mError\033[0m Docker build failed"
        exit $rc
    fi
}


_check_python3() {
    python3 -c exit >/dev/null 2>&1
    if (( $? > 0 )); then
        echo "python3 not found in path. Cannot generate manifest."
        exit 5
    fi
}


_generate_manifest_and_image_build_number() {
    if [[ ! "$MANIFEST_SCOPE" ]]; then
        echo "MANIFEST_SCOPE not set - no build number generated."
        return
    fi
    _check_python3
    _get_container_status
    is_running=$?
    if (( $is_running == 0 )); then
        echo "Container already running. Cannot generate manifest, image not tagged"
        exit 2
    elif [[ ! -e "$buildscriptsdir/manifest.sh"  ]]; then
        echo "cannot run '$buildscriptsdir/manifest.sh'; image not tagged"
        exit 3
    fi
    mkdir -p $proj_home/manifest
    manifest_temp="$proj_home/manifest/manifest.tmp"
    $buildscriptsdir/manifest.sh > $manifest_temp
    $buildscriptsdir/run.sh -i /opt/bin/manifest2.sh | sed -e 's/\r$//' >> $manifest_temp
    build_number_file=$(mktemp)
    python3 $buildscriptsdir/buildnbr.py generate $manifest_temp $MANIFEST_SCOPE $build_number_file
    build_number=$(cat $build_number_file)
    rm $build_number_file
}


_get_container_status() {
    if [[ "$($sudo docker ps -f name=$CONTAINERNAME |egrep -v ^CONTAINER)" ]]; then
        return 0   # running
    elif [[ "$($sudo docker ps -a -f name=$CONTAINERNAME|egrep -v ^CONTAINER)" ]]; then
        return 1   # stopped
    else
        return 2   # not found
    fi
}


_tag_with_build_number() {
    newname="${IMAGENAME}:B${build_number}"
    _tag_image
}


_tag_image() {
    cmd="${sudo} docker tag ${IMAGENAME} ${newname}"
    [[ "$verbose" ]] && echo $cmd
    $cmd
    if (( $? == 0 )); then
        echo "Successfully tagged ${IMAGENAME}:B${build_number}"
    else
        echo "Failed to create tag ${IMAGENAME}:B${build_number}"
        exit 4
    fi
}


_untag_image() {
    cmd="${sudo} docker rmi ${newname}"
    [[ "$verbose" ]] && echo $cmd
    $cmd
    (( $? > 0 )) && echo 'untag failed' && exit 5
}


_push_image() {
    # push image if $push is set, with following tagging rules: 
    #   push with tag $image_tag or without tag (i.e. :latest) if $push_latest or $image_tag are set
    #   push with build_number if $manifest is set
    if [[ "$push" ]]; then
        if [[ "$image_tag" || "$push_latest" ]]; then
            newname="${DOCKER_REGISTRY_PREFIX}${image_name_tagged}"
            _tag_image
            cmd="${sudo} docker push ${newname}"
            [[ "$verbose" ]] && echo $cmd
            $cmd
            (( $? > 0 )) && echo 'push failed' && exit 6
            _untag_image
        else
            echo "skipping docker push of :latest"
        fi
        if [[ "$manifest" ]]; then
            newname="${DOCKER_REGISTRY_PREFIX}${IMAGENAME}:B${build_number}"
            _tag_image
            cmd="${sudo} docker push ${newname}"
            [[ "$verbose" ]] && echo $cmd
            $cmd
            (( $? > 0 )) && echo 'push failed' && exit 6
            _untag_image
        fi
    fi
}


main $@

