#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
[[ "$BASH_TRACE" ]] && set -xv


# From the image name from the compose file (in IMAGENAME) following variants are derived

# - local_image_name_latest  = IMAGENAME
# - local_image_name_buildnr  = IMAGENAME:Bn.m
# - remote_image_name_latest  = local_image_name_latest if (DOCKER_REGISTRY_HOST is empty) else DOCKER_REGISTRY_HOST/local_image_name_latest
# - remote_image_name_buildnr  = local_image_name_buildnr if (DOCKER_REGISTRY_HOST is empty) else DOCKER_REGISTRY_HOST/local_image_name_buildnr

# local names are used for build, remote names for push

main() {
    _get_commandline_opts "$@"
    _set_home_dirs
    _load_dcshell_lib
    load_compose_yaml_config
    init_sudo
    _validate_manifest_options
    local_image_name_latest=$IMAGENAME
    if [[ "$build" ]]; then
        _remove_previous_image  # i.e. image:latest or custom tag specified with -t
        [[ "$keep_opt" ]] || _remove_all_buildnumber_tags # filters all tags with the Bn.m pattern
        _build_image
        if [[ "$manifest" && "$MANIFEST_SCOPE" ]]; then
            local buildnr=$(_generate_image_build_number)
            _set_image_names_buildnr "$buildnr"
            _tag_image "$local_image_name_buildnr"
        else
            echo "No build number requested or no MANIFEST_SCOPE set."
        fi
    fi
    if [[ "$push" ]]; then
        _tag_remote_image_names
        _push_images
        _untag_remote_images
    fi
}


_get_commandline_opts() {
    build='True'
    manifest='True'
    unset custom_tag_suffix
    push_latest='True'
    f_index=0
    while getopts ":cD:hf:klmMpPrv" opt; do
      case $opt in
        c) cacheopt="--no-cache";;
        D) projdir=$OPTARG; projdir_opt="-D $OPTARG";;
        f) dc_config_list[$f_index]=$OPTARG;
           dc_config_opt="${dc_config_opt} -f ${OPTARG}";
           f_index=$((f_index+1));;
        k) keep_opt='True';;
        l) unset push_latest;;
        m) manifest='True';;
        M) unset manifest;;
        p) push='True';;
        P) push='True'; unset build;;
        r) remove_img='True';;
        v) verbose='True';;
        :) echo "Option -$OPTARG requires an argument"; exit 1;;
        *) _usage; exit 0;;
      esac
    done
    shift $((OPTIND-1))

    # post-process -f argument(s)
    dc_opt_prefixed=''
    if (( f_index==0 )); then
        _get_default_config
        if [[ "$dc_config_base" ]]; then
            dc_opt_prefixed="-f ${dc_config_base}"
        else
            echo "you need to specify the config file (-f <compose-file>)"; exit 1
        fi
    else
        for f in "${dc_config_list[@]}"; do
            [[ "$projdir" ]] && f="${projdir}/${f}"
            if [[ ! -f "$f" ]]; then
                echo "-f ${f} must be a file"; exit 1
            else
                dc_opt_prefixed="$dc_opt_prefixed -f ${f}"
            fi
            dc_config_base=${dc_config_list[0]}
        done
    fi
}

_usage() {
    echo "usage from shell: $0 [-b] [-c] [-D path] [-f file]... [-h] [-k] [-l] [-m] [-M] [-p] [-r] [-t tag] [cmd]
         -c  do not use cache (build --no-cache)
         -D  specify project directory (file parameters will be relative to this path)
         -f  compose file (can be specified multiple times; later files update keys in former ones)
         -k  keep previous build tags (default: remove all '<buildnr>' tags)
         -l  do not push image:latest (push :<buildno> and tag from -t if -t is given)
         -m  generate manifest for build number generation (default)
         -M  do not generate manifest for build number generation
         -p  push after build (pushing :latest depends on -l)
         -p  push without build (useful for a build-test-push flow)
         -r  remove existing image (all tags: docker rmi -f imageid)
         -v  verbose

       The -m and -t tagging require that there is not tag on the image element in the compose file.

       Tagging rules:
       1. Key 'image' in the compose file must not be tagged (-> use different compose files for build and run).
          Therefor build always creates image:latest
       2. Unless -M is specified, the image is tagged with <buildnr> in addition to 'latest'
       3. Tag image with 'latest' (unless -l is given) or custom tag from -t option
       4. By default, both 'latest' and <buildnr> tags are pushed.

       The registry user (local == remote) is taken from the compose file and cannot be changed here.

       To generate build numbers MANIFEST_SCOPE must be set to 'local' or 'global'.
       All services defined in the compose file are build, but the manifest is generated only for the first one.

       To push to a specific container registry the environment variable DOCKER_REGISTRY_HOST must be set.
       DOCKER_REGISTRY_HOST has the format <hostname>[:port]
       Otherwise the push refers to the default registry (docker.io, or first entry in /etc/containers/registries.conf -> rpm containers-common with rh-docker)

       "
}


_build_image() {
    _exec_docker_compose build $cacheopt
    rc=$?
    if (( rc == 0 )); then
        echo "image: ${local_image_name_latest} built."
    else
        echo -e '\E[33;31m'"\033[1mError\033[0m Docker build failed"
        exit $rc
    fi
}


_exec_cmd() {
    local cmd="${sudo} $*"
    [[ "$verbose" ]] && echo "$cmd"
    $cmd
    rc=$?
    if (( rc > 0 )); then
        echo "${cmd} failed with code ${rc}"
    fi
    return $rc
}


_exec_docker_compose() {
    local cmd="${sudo} docker-compose ${dc_opt_prefixed} $*"
    [[ "$verbose" ]] && echo "$cmd"
    $cmd
    return $?
}


_generate_image_build_number() {
    get_container_status
    mkdir -p "$DC_PROJHOME/manifest"
    manifest_temp="$DC_PROJHOME/manifest/manifest.tmp"
    "$DCSHELL_HOME/manifest.sh" $dc_opt_prefixed > $manifest_temp
    label="${DC_SERVICE}.dcshell.build.manifest2"
    $sudo docker rm -f $($sudo docker container ls --filter "label=${label}" --quiet) \
        >/dev/null 2>&1 | true
    _exec_docker_compose run --rm --label "${label}" ${DC_SERVICE} /opt/bin/manifest2.sh | \
        sed -e 's/\r$//' >> $manifest_temp
    build_number_file=$(mktemp)
    python3 $DCSHELL_HOME/buildnbr.py generate $manifest_temp $MANIFEST_SCOPE $build_number_file
    build_number=$(cat $build_number_file)
    rm $build_number_file
    echo $build_number
}


_get_container_status() {
    if [[ ! "$CONTAINERNAME" ]]; then
        echo 'CONTAINERNAME must not be empty'
        exit 1
    elif [[ "$($sudo docker ps -f name=$CONTAINERNAME |egrep -v ^CONTAINER)" ]]; then
        return 0   # running
    elif [[ "$($sudo docker ps -a -f name=$CONTAINERNAME|egrep -v ^CONTAINER)" ]]; then
        return 1   # stopped
    else
        return 2   # not found
    fi
}


_get_default_config(){
    dc_config_base=$(ls docker-compose.y*ml)
}


_load_dcshell_lib() {
    echo $projdir_opt > /dev/null  # tell lint that this var is required
    source "$DCSHELL_HOME/dcshell_lib.sh"
}


_push_images() {
    if [[ "$push_latest" ]]; then
        _exec_cmd "docker push ${remote_image_name_latest}" || exit 5
    else
        echo "skipping docker push of :latest"
    fi

    if [[ "$manifest" ]]; then
        _exec_cmd "docker push ${remote_image_name_buildnr}" || exit 5
    else
        echo "skipping docker push of :latest"
    fi
}


_remove_all_buildnumber_tags() {
    local tmpfile=$(mktemp /tmp/build_shXXXX.tmp)
    $sudo docker image ls --filter reference=$IMAGENAME --format "{{.Tag}} {{.Repository}}" |\
        perl -ne 'if (/^(B\d+\.\d+)\s+(.+)$/) {print "\$sudo docker rmi $2:$1\n"}' > "$tmpfile"
    [[ "$verbose" ]] && cat "$tmpfile"
    bash "$tmpfile"
    rm "$tmpfile"
}


_remove_previous_image() {
    if [[ "$remove_img" ]]; then
        local image_id=$(${sudo} docker images ls --filter "reference=${local_image_name_latest}" -q)
        local cmd="${sudo} docker rmi -f ${image_id}"
        [[ "$verbose" ]] && echo "$cmd"
        $cmd 2> /dev/null || true
    fi
}


_set_home_dirs() {
    export DCSHELL_HOME=$(cd $(dirname "$BASH_SOURCE"[0]) && pwd)
    if [[ "$projdir" ]]; then
        export DC_PROJHOME=$projdir
    else
        export DC_PROJHOME=$(cd $(dirname "$DCSHELL_HOME") && pwd)
    fi
}


_set_image_names_buildnr() {
    local buildnr=$1
    local_image_name_buildnr="${IMAGENAME}${buildnr}"
    if [[ "$DOCKER_REGISTRY_HOST" ]]; then
        remote_image_name_buildnr="${DOCKER_REGISTRY_HOST}/${IMAGENAME}${buildnr}"
    else
        remote_image_name_buildnr=$local_image_name_buildnr
    fi
}

_set_image_names_latest() {

    if [[ "$DOCKER_REGISTRY_HOST" ]]; then
        remote_image_name_latest="${DOCKER_REGISTRY_HOST}/${local_image_name_latest}"
    else
        remote_image_name_latest=$local_image_name_latest
    fi
}


_tag_image() {
    local new_image_name=$1
    cmd="${sudo} docker tag $IMAGENAME ${new_image_name}"
    [[ "$verbose" ]] && echo $cmd
    if $cmd; then
        echo "Successfully tagged ${new_image_name}"
    else
        echo "Failed to create tag ${new_image_name}"
        exit 4
    fi
}


_untag_remote_images() {
    if [[ "$remote_image_name_latest" != "$local_image_name_latest" ]]; then
        _exec_cmd docker image rm $remote_image_name_latest || exit 6
    fi
    if [[ "$remote_image_name_buildnr" != "$local_image_name_buildnr" ]]; then
        _exec_cmd docker image rm $remote_image_name_buildnr || exit 6
    fi
}


_validate_manifest_options() {
    if [[ "$manifest" ]]; then
        if [[ ! "$MANIFEST_SCOPE" ]]; then
            echo 'Build number generation requested but MANIFEST_SCOPE not set'
            exit 1
        fi
        if _get_container_status; then
            echo "Build number generation requested but container is already running. (Cannot generate manifest)"
            exit 1
        elif [[ ! -e "$DCSHELL_HOME/manifest.sh"  ]]; then
            echo "cannot run $DCSHELL_HOME/manifest.sh; image not tagged"
            exit 1
        fi
    fi
}


main "$@"
